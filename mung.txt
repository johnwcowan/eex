Options:
-D              no readline
-o              capture all of standard input and write it atomically to a file (for pipelines)

Editing commands:
|               filter state to make new state (\ for multiline command)
describe / d    set comment for state
edit / e        make new state with editor

State tree commands:
undo / u        undo last change to state
redo / r        undo undo (specify a substring)
choices / c     list redo choices

Tag commands:
tag / t         tag current state with specified tag
goto / g        jump to specified tagged state
back / b        return from last goto

Termination commands:
done            write output file, delete all states, and terminate
quit / q / EOF  just terminate
purge           remove most cached files, keep  metadata, and terminate
abandon         delete all states and terminate

Miscellaneous commands:
all / a         show whole tree
show / s        file and state metadata
page / p        view state with $PAGER
help / h        show this help
!               run shell command (\ for multiline command)

Files in the state directory:
0               copy of original file
1-n             cached state files
states          tab-separated file of states: parent, command, description (\t and \n escapes)
tags            tab-separated file of tags: tag, state id
stack           file containing the goto stack using state ids
current         the current state id
lock            pid of currently running mung (can be broken if there is no such pid)

Environment variables:

VISUAL          Editor used by e command
EDITOR          Used if VISUAL is not defined, defaults to vi
PAGER           Pager used by p command, defaults to less.
