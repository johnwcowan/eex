Options:
-R              read-only (exit = quit)
-B              back up files on write using Emacs conventions
-D              no readline
-o              capture all of standard input and write it atomically to a file (for pipelines)

Editing commands:
|               filter state to make new state (\ for multiline command)
describe / d    set comment for state
edit / e        make new state with $VISUAL or $EDITOR

State tree commands:
undo / u        undo last change to state
redo / r        undo undo (specify a substring)
choices / c     list redo choices

Tag commands:
tag / t         tag current state with specified tag
goto / g        jump to specified tagged state
back / b        return from last goto

Termination commands:
exit / x        write file, delete all states, and terminate
quit / q        remove cached files, keep state metadata, and terminate
abandon         delete all states and terminate

Miscellaneous commands:
all / a         show whole tree
show / s        file and state metadata
page / p        view state with $PAGER
purge           remove cached files according to $MUNG_AGE and $MUNG_LIMITS
help / h        show this help
!               run shell command (\ for multiline command)

Files in the state directory:
1-n             cached state files
states          tab-separated file of states: parent, command, description (\t and \n escapes)
tags            tab-separated file of tags: tag, state id
stack           file containing the goto stack using state ids
current         the current state id
lock            pid of currently running mung (can be broken if there is no such pid)

Environment variables:

MUNG_AGE        Cached files older than this (in days) are removed
MUNG_LIMITS     Specify soft and hard limits on size of cached files as 30G/60G;
                above the soft limit, cached files are removed according
                to the time it takes to regenerate them, but above the
                hard limit by size.

